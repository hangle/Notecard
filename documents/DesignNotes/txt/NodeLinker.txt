------------------------
Node And Linker Traits
------------------------

 The following lists the class of the linked list hierachy. The Notecard  
class has four children (NotecardTask, NextFile, CardSet, LoadDictionary).   
The CardSet class has 5 children, beginning with the Assign Class. The   
RowerNode class has 3 classes. The BoxField has only one child (EditNode).  

<pre>
			Notecard Class Hierarchy

                                                 Script Examples  
										 ---------------
              Notecard  
					LoadDictionary				 l
						Assign				     a $value=5
                  NotecardTask                   * end  
                  NextFile                       f maleScript  
                  CardSet                        c (1)=(2)  
                      Assign                     a $count=$count+1  
                      XNode                      x  
                      GroupNode                  g (1) = (1)  
                      CardSetTask                * continue  
                      RowerNode                  d 3/5/  
                          DisplayText            d now is  
                          DisplayVariable        d (% $count)  
                          BoxField               d (# $name)  
                              EditNode           e ($count) < (5)  
</pre>

Every hierarchy class extends the trait Node. Thus, every class instance   
can be treated as a Node type.  In the Node trait, every hierarchy class,   
with the exception of Notecard, has a 'sibling' address that references   
the next sibling.    

A parent class (Notecard, CardSet, RowerNode, and BoxField) instance   
has a 'child' address that references the first child or first sibling.   
A parent's list of successive siblings is handled by the parent  
providing its child reference as the first sibling, then following  
the 'sibling' addresses until the list ends.  

The Linker trait provides two functions (reset(...) and iterate) to  
process a parent's list of instances.  Every parent class with children   
extends the trait Linker.  Linker employes 'reset(...)' and 'iterate'   
functions to follow successive siblings until the list ends.  In the   
Notecard class show an abstract description of these two functions   
(code has been removed to show critical parts)  

<pre>
				// Every parent class references its
				// 1st child or first sibling. 
	reset(getFirstChild)
				// iterate() returns a boolean and
				// assigns the 'current' sibling to
				// 'node'.
	while(iterate) {
		node match {
			case cs:CardSet=>
				cs.startCardSet(...)
			case ft:NotecardTask =>
				ft:startNotecardTask(...)
			case nf:NextFile =>	
				nf:startNextFile
			case ld:LoadDictionary =>
				ld.startLoadDictionary(...)	
			}
</pre>

The reset function hand the iterate function the first sibling and  
it is assigned to 'node'  The match statement determines the node  
type ( CardSet, NotecardTask, or NextFile). When the while statement   
loops a second time, 'node' holds the reference to the next sibling   
in the list.   

The two functions are shown below: The variable 'node' is the current  
sibling while 'iterator=iterator.next' assigns the next sibling to  
'iterator'. On the initial 'while(iterate)' loop, the variable    
'iterator' holds the 1st sibling instance, on the next loop, it holds  
the second sibling, and so on.  

<pre>

	def reset(child:Node) { // Initialize the list
				// child is the 1st child of the 
				// Parent, that is 1st sibling 
		iterator=child
		}
	def iterate= {
		if(iterator==null)
			false
		  else {
				// store current sibling before 
				// accessing the next sibling 
			node=iterator
				// 'next' is the next sibling
				// held by the current sibling
			iterator=iterator.next
			true
			}
		}

</pre>

The following example employees a script file 'fourCards.nc' that   
was processed by the Script program whose output is 'fourCards.struct'.  
The Script output  'fourCards.struct' is the input to the Notecard   
program.  

The initial loop of 'while(iterate)' passes the address 2002 to 'node'  
which is the first CardSet.  The 'iterator' value has also been assigned  
the addresss 2008 of the second CardSet.  When 'while(iterate)' loops a   
second time, then 2008 is assigned to 'node'.   

<pre>
		%Notecard
		child   2002
		...
		%%
		%CardSet
		address 2002
		child   2003	---> RowerNode ---> DisplayText->"Card one"
		sibling 2005
		...
		%%
		%CardSet
		address 2005
		child   2006	---> RowerNode ---> DisplayText->"Card two"
		sibling 2008
		...
		%%
		%CardSet
		address 2008
		child   2009	---> RowerNode ---> DisplayText->"Card three"
		sibling 2011
		...
		%%
		%CardSet
		address 2011
		child   2012	---> RowerNode ---> DisplayText->"Card four"
		sibling 2014
		...
		%%
		%NotecardTask
		address 2014
		...
</pre>



