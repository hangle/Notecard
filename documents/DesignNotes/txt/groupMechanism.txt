
Group Command Mechanism
========================

The following command script displays 'not in scope...'.  The two display   
commands:

		d in scope of group command
		d also in scope of group command

are bounded by the Group command 'g (1)=(1)' and the Clear command of   
the next CardSet.  These Display commands are executed when the   
condition '(1)=(1)' of the Group Command is true.   

		c
		d not in scope of group command
		g (1)=(1)
		d in scope of group command
		d also in scope of group command
		c  
		...

The two Display commands in question are not executed in the following:  

		c
		d not in scope of group command
		g (1)=(2)
		d in scope of group command
		d also in scope of group command
		c  
		...

The role of GroupNode is to test the condition of the Group command,   
provided that the command has a conditional expression. In the   
following script, the second Group command has just the tag 'g'.  

		c
		d not in scope of group command
		g (1)=(2)
		d in scope of group command
		d also in scope of group command
		g
		d not in scope of group command
		c  
		...

The scope of 'g (1)=(2)' extends not to the start of the Clear command   
but to the second 'g' command.  The second 'd not in scope of ...' is   
displayed.   

The 'g' command, without a conditional expression, is a means to   
establish scope of the Group command execution.  

The script arguments passed to GroupNode when instantiated are:  

		condition	<expression>    //<expression>  e.g., (1)=(2)
		post		else <or> 0     // else condition cited below.

The Group command may have the tag 'ge' that denotes an else   
condition. For example:

		c
		g ($capital)=(Columbus)
		d Correct
		ge
		d Sorry, Columbus is the capital of Ohio
		c
		...

Had $capital contained the value Cleveland, then the second Displays   
command, and not the first, would have printed.   

###GroupNode

 In the above script code, the script program translates the 'g ($capital)=(columbus)'   
and 'ge' to the following in the '.struct' file:  

		%GroupNode
		address	2023
		sibling	2024
		name		0
		condition	($capital)=(Columbus)
		post	0
		%%
		%DisplayText 
		...
		%%
		%GroutNode
		address 2025
		sibling 2026
		name		0
		condition	0
		post	else
		%DisplayText 
		...
		%%
 
The paramter 'name' is not operational.  The first GroupNode 'condition' argument   
is  '($capital)=(Columbus)' and its 'post' argument is '0'.  The 'condition'   
argument of the second GroupNode is zero; but its 'post' argument is 'else'.   
 
In the GroupNode class, the combinition of 'condition' and 'post' produce the
following mutually exclusive types:

		ThenNode = 1		Has condition expression, e.g., g (1)=(1)
		ElseNode = 2		"else" type but no condition, i.e., ge
		ElseConditionNode=3	"else" type with condition, e.g., ge (1)=(1)
		EmptyNode=4		no "else' type and no condition, i.e., g

The type value (1,2,3,4) is assigned to 'kind'.

###CardSet

The Group command is a child class of CardSet. In the iteration of CardSet objects,  
the function 'executeOneCardSet' is invoked to process child object.   

		obj match {
			case rn:RowerNode=> ...
			case as:Assigner=>  ...
			case cst:CardSetTask=> ...
			case xn: XNode => ...
			case gn:GroupNode=>
				whatToDo( ...

The Group command is processed by the 'whatToDo(...) function.  This function decides  
whether of not execute the CardSet commands within its scope of control. It also  
decides on whether the Group command has completed its task.  


