
Backup  Mechanism
----------------

The following script  shows three CardSets.  In the present case,
each CardSet consist of a clear (c) command and a display (d)
command

<pre>
		c
		d First CardSet display

		c
		d Second CardSet display

		c
		d Third CardSet display
</pre>

The design document NodeLinker.md describes how the Notecard  
program processes  CardSets in their proper order (First,
Second, Third).  This design document describes how Notecard
processes CardSets in reverse order (Third, Second, First).
Reversing the order provides a backup mechanism.

When a backup operation is available, the Prior button is
highlighted along with the Next button.  Assume the current
CardSet is the second CardSet with the display:

		Second CardSet display

Both the Next and the Prior buttons are highlighted. The
activation of the Next button executes the third CardSet.
The execution of the Prior button re-presents the first
CardSet.

Assume the CardSet is the first CardSet. In this case,
the Prior button is greyed. There is no Prior CardSet.
  


The trait Linker has two functions (reset and iterate). These two   
functions are shown for the Notecard class to process its four   
children (LoadDictionary, NotecardTask, NextFile, and Cardset):  

<pre>
		reset(getFirstChild)
		while(iterate) 
			node match {
				ld: LoadDictionary => ...
				nt: NotecardTask => ...
				nf: NextFile => ...
				cs: CardSet => ...
					storePriorSiblingInBackupList
					cs:startCardSet(...)
				...
</pre>

The two functions are shown below: The variable 'node' is the current  
sibling while 'iterator=iterator.next' assigns the next sibling to  
'iterator'. On the initial 'while(iterate)' loop, the variable  
'iterator' holds the 1st sibling instance, on the next loop, it holds  
the second sibling, and so on.  

<pre>
		def reset(child:Node) { // Initialize the list
					// child is the 1st child of the 
					// Parent, that is 1st sibling 
			iterator=child
			}
		def iterate= {
			if(iterator==null)
				false
			  else {
					// store current sibling before 
					// accessing the next sibling 
				node=iterator
					// 'next' is the next sibling
					// held by the current sibling
				iterator=iterator.next
				true
				}
			}
</pre>

In the iterate loop, the CardSet nodes are handled by:  

<pre>
		cs:CardSet=>
			storePriorSiblingInBackupList
			if(cs.isAddCardSet)
				buttonSet.armAddCardSet
			cs.startCardSet(notePanel, lock, buttonSet, statusLine)
			waitOverDoButtons(taskGather, 
					  cs,
					  notePanel,
					  lock,
					  buttonSet, 
					  statusLine)
</pre>

Linker.storePriorSiblingInBackupList stores the "current" 'node' of the iterate  
function in a list (backupList). When the loop completes, the "current" become  
the "prior" node and 'iterator' becomes the new "current" while 'startCardSet'  
executes (loop not completed).  

The 'waitOverDoButton(...)' allows the user to activate the Prior button provided  
the there is a prior CardSet. Again the loop has not completed. Activation of  
the Prior button invokes the Linker function 'loadBackupWithIterator':  

The first task of this function is to remove the 'node' that was just placed  
on the 'backupList'.  Until the loop completes, the 'node' is not actually the  
"prior" CardSet.  When removed, than the head of the 'backupList' is the  
"prior" CardSet.  This "prior" CardSet is assigned to 'iterator' of the iterate  
function. When the new loop begins, this "prior" CardSet is executed.   

The 'loadBackupWithIterator' handles the case it is not possible to backup  
beyond the 1st CardSet.  Another case arises in the event a 'c' (clear)  
command has a logical condition that fails.  The logical condition is  
tested in the CardSet class, however, the CardSet's "prior" node is stored  
in the 'backupList' yet when its condition fails, then the CardSet is  
skipped.   

Suppose three adjacent CardSet 'c' command conditions fail.  In the CardSet  
class these sets are skipped, that is, the set of commands are not executed:  

<pre>
	if(noConditionOrIsTrue(...)){
		<do CardSet commands>
		showPanel(notePanel) 
			// Allow button activation by user.
		haltCommandExecution(lock)	
		clearNotePanel(notePanel)	
		}
</pre>

However, the nodes of the three are stored in the 'backupList'.  When  
the Prior button is activated,  the backup mechanism begins by loading  
the three failed CardSets into the 'iterate' function. But again the  
CardSet class skips the three because the halt or locking mechanism is  
also skips. The prior CardSet with no condition or a successful one  
will encounter the halt and locking mechanism.   
