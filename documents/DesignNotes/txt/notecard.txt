Notecard Program
================

The program presents a window about the size of a note card.    
The window displays text to and accepts input from the program   
user.  The text and input are controlled by a script file of   
ten command types.     

The description of the Notecard program begins with the script   
file 'nowis.nc'.  To keep the explanation simple, 'nowis.nc'   
consists of the three commands types whose tags are (c, d, *).  
'nowis.nc' presents two successive card windows; the first   
displays "now is" and the second displays "the time".  

<pre>
                c
                d now is
                c
                d the time
                * end
</pre>

The Script program has validated these commands and has   
generated an input file (nowis.struct) to the Notecard program   
(beginning with the '%Notecard' group and ending with the   
'%NotecardTask' group:  

<pre>
                 %Notecard                         %CardSet
                 child	     2002                  address    2005
                 height	     300                   child      2006
                 width	     400                   sibling    2008
                 font_size	 14                    name       0
                 asteriskButton	on                 condition  0
                 priorButton	on                 %%
                 %%

                 %CardSet                         %RowerNode
                 address	2002                  address   2006
                 child      2003                  child     2007
                 sibling	2005                  sibling   0
                 name		0                     row       0
                 condition	0                     column    0
                 %%                               %%

                 %RowerNode                       %DisplayText
                 address	2003                  address  2007
                 child	    2004                  sibling      0
                 sigling	0                     style    14
                 row        0                     column    0 
                 column	    0                     name    TimesRoman
                 %%`                              text    the time
                                                  color   black
                                                  %%
                 %DisplayText                    
                 address	2004
                 sibling	0                    %NotecardTask
                 style	    1                    address   2008
                 size	    14                   task      end
                 column	    0                    type      0
                 name	    TimesRoman           %%
                 text	    now is
                 color	    black
                 %%
</pre>

The script beginning with the single '%' symbol, followed by a   
classname, such as,   "Notecard", create objects from five case   
classes (Notecard, CardSet, RowerNode, DisplayText and  
NotecardTask).     

				CreateClass.scala
				-----------------
		%<classname>  match {                             
			case "%Notecard" =>     notecard=Notecard(..)  ...
			case "%CardSet" =>      cardSet= CardSet(..)  ...
			case "%RowerNode" =>    rowerNode=RowerNode(..)  ...
			case "%DipslayText" =>  displayText=DisplayText(..)  ...
			case "%NotecardTask"=>  notecardTask=NotecardTask(..) ...
			.... }  

The pairs of values following the '%<classname>' tag are arguments   
added to the newly  created case classes.  The tag '%%' terminates   
these arguments. Each case class has the method 'receive_objects(..)'   
that assigns these arguments to the class parameters.  For example,   
the arguments for the 'displayText' instance are:   

		14
		0
		TimesRoman
		the time
		black

The instances of the case classes form a structure of linked   
lists; Notecard iterates through these lists to display its cards.  
Note in the 'nowis.struct' the values ranging from 2002 to  
2008. These numbers are paired with 'child', 'address' and 'sibling'.   
Together, the pairs  represent the symbolic addresses of the linked  
list structure.   

The root node instance of the structure is 'Notecard'.  It is the  
parent of the two 'CardSet' instances. 'Notecard's child value  
references the first 'CardSet' whose address is 2002.  The sibling  
value of the first 'CardSet' references the second 'CardSet'  
instance whose sibling value is 0, terminating the list.   

The two 'CardSet' instances are both parents having child values  
(2003 and 2006) referencing the two 'RowerNode' instances. 'The  
RowerNode' instances are parents referencing the 'DisplayText'  
instances.  

Finally, 'DisplayText' is also a parent but 'nowis.nc' does not  
require its children; its  child value is 0.

The linked list classes methods: 

	contvertToReference(swizzleTable:Map[String,Node]) 

converts symbolic addresses to physical ones.

Parent Child Linkage  
--------------------

The classes 'Notecard', 'CardSet', 'RowerNode', and   
'DisplayText' extend the trait 'Node'.    The trait 'Node' has  
two variables (child and next) that establishes the   
parent/child linkage. 

The parent classes 'Notecard', 'CardSet', 'RowerNode', and   
'DisplayText' extend the trait 'Link'  having two funtions   
to process the parent's linked list.    

		def reset(child:Node) { iterator=child }  
		def iterate= {  
			if(iterator==null)  
				false  
			  else {  
				Value=iterator  
				iterator=iterator.getNext.asInstanceOf[Node]  
				true  
				}  
			}    

The 'Notecard' instance passes 'Node.child' to 'reset(...)'   
and executes the 'while' loop:  

		reset(getFirstChild)   
		while(iterate) {  
			Value match {  
				case cs: CardSet =>  cs.startCardSet(...)  
				...  }
			}

When 'startCardSet(..)' is invoked for the first 'CardSet'  
instance, a similar reset  while routine is executed:

		reset(getFirstChild)   
		while(iterate) {  
			Value match {  
				case rn: RowerNode =>  rn.startRowerNode(...)  
				...  }
			}

Again, in 'RowerNode'  a similar reset/while routine is   
executed to execute 'DisplayText'  
instance. 

		reset(getFirstChild)
		while(iterate) {    
			Value match {  
				case rn: RowerNode => rn.startRowerNode(...)  
				... }  
				}

The text of the first card (i.e., "now is") is not shown   
until 'CardSet' reaches the   end of its list to terminate   
the 'while(iterate)' loop.  At this point, the window   
panel is shown and execution is halted by 'wait()'.  

		showPanel(...)  
		haltCommandExecution( lock )  

At this point, the NEXT button  has been enabled and its color   
is now orange.  When the button  is activated, the  wait  
state is released:  

		ButtonSet.lock.notifyAll()  

The operation is more complicted when a CardSet has one or  
more input fields to be   captured.  The Next button is not   
activated until this capture is completed.   

The 'nowis.nc' example is shown as simplified code, for  
example, the linked list structure was depicted five case  
classes.  The complete set of linked list classes,  
as well as associated script command examples, are:   

<pre>
                                                 Script Examples  
								 ---------------
               Notecard  
                  NotecardTask                   * end  
                  NextFile                       f maleScript  
                  CardSet                        c (1)=(2)  
                      Assign                     a $count=$count+1  
                      XNoded                     x  
                      GroupNode                  g (1) = (1)  
                      CardSetTask                * continue  
                      RowerNoded                 d 3/5/  
                          DisplayText            d now is  
                          DisplayVariable        d (% $count)  
                          BoxField               d (# $name)  
                              EditNode           e ($count) < (5)  
</pre>
		
Specialized Layout Manager
--------------------------

The Display command is line oriented such that the text  
exceeding the window's width is lost from view.  A  
specialized layout manager 'NoteLayout' that  extends the   
abstract class 'awt.LayoutManager' is utilized to display   
lines of text.  The   crucial abstract method that the  
'NoteLayout' impliments is:  

              def layoutContainer(notePanel: Container) {  
                  for( i - 0 until notePanel.getComponentCount())    
                       notePanel.getComponent(i).asInstanceOf[Visual].render()    
                  }  

The classes that render text are 'DisplayText',   
'DisplayVariable' and 'BoxField';  each extends the trait  
'Visual' having an abstract method 'render()'.  A simplified      
version of 'render()' in 'DisplayText' in which 'awt.Component'   
methods are invoked:   

              def render() {  
                  setForeground(color)    //color= black  
                  setText(text)           //text=  hello world  
                  setBounds(column,row, ....)  // column=0, row=0  
                  }      

The 'setBounds' method is the key to the line oriented feature   
of Notecard.   

In the root structure class, 'Notecard', the 'NotePanel' class   
instantiates a 'JPanel'  object passing it 'new NoteLayout'.    

Response Capture  
----------------

In the script 'inputOnly.nc' the user is presented a card window   
that has a response  or input field.   

<pre>
                inputOnly.nc (file)
		-----------------
               c  
               d (# $myInput)
</pre>

The following shows the 'inputOnly.struct' file.

<pre>
				%Notecard                      %BoxField
				child	2002                   address	2006   0
				height	300                    address  0 
				width	400                    sibling   0
				font_size	14                 field    $myInput
				asteriskButton	on             length   10
				priorButton	on                 column   00
				%%                             size     14
				                               style    1
				%CardSet                       name     TimesRoman
				address	   2002                color    black
				child	   2003                limit    99
				sibling	   0                   option   0
				name	   0                    %%
				condition  0
				%%                             

				%RowerNode
				address	2003
				child 	2004
				sibling	0
				row    	0
				column	0
				%%
</pre>

The user's input is handled by the 'BoxField' class (extends  
JTextField) . The input is   stored in '$myInput'.  Until the   
user hits the 'ENTER' key, the 'NEXT' button is inactive.     
The 'ENTER' key set the button color to orange.  Activation of  
the button would display the next card, provided one existed  
(instead, a new instance of 'Notecard' is created and  the   
card repeats).  Typically, a '* end' command is present to  
terminate the session.  

The parent of 'BoxField' is 'RowerNode'.  When this parent  
detects its 'BoxField' child,  it creates the following  
instances and passes its child to both:  

		KeyListenerObject (extends KeyListener)
		InputFocus

'KeyListenerObject' captures the user's response so that  
'BoxField' can store it in  '$myInput'.

The role of 'InputFocus' handles the multiple 'BoxField's  
that a card my have, for example:  

<pre>
			c
			d Enter first name (# $first) and last (# $last)
			d Also your age (# $age) and sex (# $gender)
			c ....
</pre>

Four 'BoxField' instances are created for this card.  When   
the card is presented, the first  input field is given  
focus. When '$first' is captured, the focus must shift  
to the next input field to catpure '$last'. And so on until  
all fields have been entered; at which point,  'InputFocus'  
sets the 'NEXT' button to orange.   

