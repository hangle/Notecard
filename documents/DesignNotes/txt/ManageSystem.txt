Management System
================

The Management System allows the user to switch from one  script   
command file (*.nc) to another script file by activating a button.  
The switch occurs from any CardSet of the first file to the   
beginning CardSet of the second file.  From any CardSet of the second    
file, activation of the button returns the display of the CardSet  
within the first file from which the button was initially activated.  

Switching to a 'management' file was useful within a survey/interview   
context.  When an interviewee is unable to complete the survey,  
then an interviewer, following the button activation, can record in   
the 'management' file the reasons for interruption.  In addition,     
the 'management' file records the stopping point of the interview   
so that the interview can be restarted at a later time (current   
system lacks the restart mechanism).

The button with the symbol '*'  controls the file switching. The   
'*' button is one of four buttons that reside at the bottom of   
the Notecard window.  When the '*' button is activated, then the   
user is switched to the start of the 'management' file.  Within the   
'management' file, the activation of the '*' button returns the   
user to the initial file and to the CardSet from which the '*'   
button was initiated.  

The designated (filenameA)  serves as an example of the initial   
file;  and the (management) file as the switch-to target file.  
Both (filenameA)  and (management) files are converted to Linked   
List structures by CommandNetwork.loadFileAndBuildNetwork().   
The function returns the root of the Linked List structure and   
is invoked in three places:  

	card 
	NotecardTask.  
	Notecard	

'card' invokes 'loadFileAnd...' to create the 'root' structure  
for the current script file that will be termed (filenameA).  
A child of 'Notecard' is 'NotecardTask' which handles the  
command '* management filename'. This command causes  
'NotecardTask' to invoked 'loadFileAnd...' to created a 'root'  
structure of the management file that will be termed (management).  

In the event that script file lacks a '* management filename'   
command, then 'loadFileAndBuildNetwork' is invoked with a   
filename that does not exist, causing the start-file CardSet  
to appear.

When the (management) file executes along with the (filenameA)  
file, the asterisk buttons of both files may be viewed. The  
asterisk button of (filenameA) is grayed but is high-lighted  
when a transition is made from the (management) file to   
the (filenameA) file.

The two roots produces by (filenameA) and (management) files are   
assigned different names   ('initialNotecard:Notecard' and   
'manageNotecard:Notecard')

notecard:Notecard root
------------------------

An essential task of the Notecard class is to iterate its linked   
list of children.   The   following function processes three children   
types (CardSet, NotecardTask, NextFile) of   the Notecard parent:

<pre>
	def executeNotecardChildren(...)
		 child match	{
			case cs:CardSet=>
				cs.startCardSet(...)
				waitOverDoButtons(..)
			case ft:NotecardTask=> ...	
				ft.startNotecardTask(..)// processes'* manage <filename>' cmd	
				manageNotecard= ...
			case nf:NextFile=>        ...
			}
</pre>

The function 'startCardSet' executes the children of the CardSet class.  
CardSet's  children   list terminates invoking a 'wait()' state.  This   
wait passes control  to the three buttons ('\*', PRIOR, NEXT).  
Activation of a button releases the 'wait()' state.   The function   
'waitOverDoButton()'  determines which button was activated and   
takes appropriate action.  In the case of the '*' button,  the  
function 'doAsteriskButton(..) is called.  

The ft.startNotecardTask(..)  processes the Asterisk commands (* end,   
* manage <filename>,   * save <filename>).   The Asterisk command,  
such as,  '* manage  myManageFile'  invokes: 

<pre>
	val manageNotecard=
		CommandNetwork.loadFileAndBuildNetwork(“myManageFile” ,symbolTable) 
</pre>

The variable 'manageNotecard' is the root of the linked list   
structure that displays   'myManageFile'.  'manageNote' is returned   
from NotecardTask to Notecard (the above does   not show how it   
is returned).  Note that this is taking place in Notecard while   
'initialNotecard' structure  is displaying <filenameA>.  

To switch from 'initialNotecard' structure to the 'manageNotecard'   
structure is a simple   matter of Notecard recursively calling   
itself:  
	
<pre>
		manageNotecard.startNotecard(...)
</pre>

This call to 'startNotecard(..)' is done from within 'doAsteriskButton(..)' .     

The complicating matter is that, while the 'manageNotecard' structure   
is running, the next     time  the '*' button is activated, then   
it causes the 'initialNotecard' structure to resume  runnning.  To   
handle this complication, two mutually exclusive  states are   
created in the form of the boolean variable:  

<pre>
		var initialNotecardState
</pre>

When 'initialNotecardState' is true,  then the management structure   
is recursively called:  

<pre>
		manageNotecard.startNotecard(..)
</pre>

In addition 'initialNotecardState' becomes false so that the next   
time the '*' button is   activated,  the recursive call is not   
repeated.   Instead, 'initialNoteCard' becomes true and an exception   
is thrown to terminate the 'manageNotecard' structure so as to return   
to processing the 'initialManage' structure.  

Within Notecard, the exception thrown by 'doAsteriskButton()' is   
caught by the try block in 'startNotecard()'. This causes the   
process to return to 'doAsteriskButton()' from which it   was invoked   
by 'startNotecard()'.  Before 'manageInitial.startNotecard()' was   
called,  the reference node of the CardSet, from which the '*' button   
was activated,  is saved.   On the   return to 'doAsteriskButton()',   
the reference node of the  CardSet is restored within the  
'initialNotecard' structure. 

The node saved and then restored causes the CardSet, that initially   
activated the '*' button, to repeat.  

