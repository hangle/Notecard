
Load Dictionary (Notecard)
==========================

###Script File

The Load 'l' command, along with associated Assign 'a' commands,   
initializes '$variables'. That is, the associated 'a' commands  
are only executed once.  The 'l' command and   associated 'a'  
commands are termed the  Load command set.  

		l 
		a $one=1
		a $one=2

The script can be made to loop or repeat when and '* end'  
command is missing or a file  command is not executed. 

		l
		a $one=0
		c
		d (% $one)		// prints the value of $one
		a $one = $one + 1

The above script, without '* end',  loops  and increment the   
value of $one each time that the CardSet is encountered:   

		c
		d (% one)		// prints 0,1,2,3,...
		a $one=$one+1

A practical application of the Load command set is to require  
questions to be correctly answered before proceeding with the  
exercise.  

		l
		a $capital1=false
		a $capital2=false
		c
		d Capital of Ohio (# $columbus)
		g ($columbus)=(Columbus)
		a $capital1=true
		c
		d Capital of New York (# $albany)
		g ($albany)=(Albany)
		a $capital2=true
		f nextExercise ($capital1)=(true) and ($capital2)=(true)

Correct answers set $capital1 and $capital2 to 'true',  
allowing the File  'f' command to execute, thus terminating the
looping action. 

		c ($capital1) = (false)
		d Capital of Ohio (# $columbus)
		g ($columbus)=(Columbus)
		a $capital1=true
		d Correct
		ge
		d Sorry, Columbus is the capital


###Linked-List Class Structure

The following is the linked list structure of the command classes.     
Notecard is the root of the structure.  As a parent, it has 4   
children (LoadDictionary, NotecardType, NextFile, and CardSet).  
LoadDictionary and CardSet are also parents  


The classes to the right of 'Notecard' are children and  
grandchildren of 'Notecard'.  The classes to the right of  
'CardSet' are children and grandchildren of this class.   
The Load command (classname: LoadDictionary) and its  
associated Assign commands  add the following substructure:  

<pre>
		Notecard
			LoadDictionary
				AssignerNode (LoadAssign)
			NotecardType
			NextFile
			CardSet
				AssignerNode
				CardSetType
				GroupNode
				XNode
				RowerNode
					DisplayVariable
					DisplayText
					BoxField
						EditNode
</pre>

The Assign command (clasname: AssignerNode) has different  
parent classes   (LoadDictionary and CardSet).   The  
AssignerNode, whose parent is CardSet, executes everytime  
it is accessed; the AssignerNode, whose parant is  
LoadDictionary, exectues just once.  
 
The LoadDictionary is envoked on each loop or iteration, however,  
its Assigner children are only processed during the first loop.  

		def startLoadDictionary  {
				// retrieve key (filename)/value from symbol
				// table. Initially, get returns None
			symbolTable.get(filename) match {
					// Do nothing when get yields the paramter
					// filename from the Symbol table
				case Some(value) =>
					// Initial value
				case None =>
					symbolTable += filename-> "0"
						//Only executed one time
					iterateAssignerObjects
				}
			}

It is processed on the first loop because 'startLoadDictionary'  
fails, in a match statement, to find its 'filename' parameter in   
the SymbolTable. As such, it executes the LoadDictionary children  
(Assigner objects). It also loads 'filename' to the SymbolTable so  
that on subsequent invocations, its children objects are not  
processed.  

###Renaming the AssignNode class

The AssignNode class whose parent is LoadDictionary has  
had its '%< classname >   renamed from that of '%AssignerNode'  
to that of '%LoadAssign'.  The name change was   done by  
the Script program.  'CreateClass' instantiates the  
'AssignerNode' instance when either '%AssignerNode' or  
'%LoadAssign' is encounter in 'create_object()'.  The  
function 'CreateClass.swizzleReferences()' converts  
the symbolic addresses to physical ones. The Script program  
made sure that the AssignerNode instances were  attached  
to their proper parent instance. 
